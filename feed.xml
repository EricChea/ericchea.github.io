<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-03-24T16:49:02-04:00</updated><id>/</id><title type="html">My blog</title><subtitle>Things I find interesting.</subtitle><author><name>Eric Chea</name></author><entry><title type="html">Tutorial: Using Django Channels to visualize RSS Feeds with React</title><link href="/sec/django/django-channels/react/advanced/2017/10/07/SEC-Django-Channels-React.html" rel="alternate" type="text/html" title="Tutorial: Using Django Channels to visualize RSS Feeds with React" /><published>2017-10-07T14:57:48-04:00</published><updated>2017-10-07T14:57:48-04:00</updated><id>/sec/django/django-channels/react/advanced/2017/10/07/SEC-Django-Channels-React</id><content type="html" xml:base="/sec/django/django-channels/react/advanced/2017/10/07/SEC-Django-Channels-React.html">&lt;p&gt;Number of words: 
    3078&lt;/p&gt;

&lt;p&gt;17 minutes to read&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is for those who are interested in using Django Channels.  Django Channels will be used in this application as a way to push data to the frontend from an RSS feed only when there is new data available as opposed to having the frontend application poll the RSS feed for new content. To get the most out of this application, you’ll need some basic understanding of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Django&lt;/strong&gt;: building an API using Django views.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;React&lt;/strong&gt;: building and serving up a static page using React.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ETL&lt;/strong&gt;: extracting XML data.  In this post, we’ll be using the BeautifulSoup and feedparser Python packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Django is a very attractive web framework because of the size of the vibrant community, it’s written in python (clean code), it’s secure, and it has a built-in backend admin interface.  It has changed since it launched over ten years ago, one quite notable change is its ability to talk to multiple databases, a capability that was not available early on.  Building a REST API is as simple as creating a view and updating a path for the URL.  However, Django did fall behind – for instance it’s incompatibilities with newer technologies such as WebSockets.  WebSockets enabled the ability for a server to actively push data to the client instead of requiring the client to poll the server for changes, dramatically freeing up bandwidth.  It is this technology that has enabled the smooth communication in chat rooms and instant messages through these persistent, long-lived connections.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt; is an asynchronous task queue/job queue on distributed message passing. It leverages the brokering capabilities of the likes of RabbitMQ and Redis and provides function decorators to simplify the form of Python scripts. Like Redis and Rabbit, there can be multiple workers listening to the queue for new jobs to consume.&lt;/p&gt;

&lt;p&gt;Collectively, integration of WebSockets with some flavoring of Celery (no pun intended) became available with Andrew Goodkind’s spearheading of the &lt;a href=&quot;https://channels.readthedocs.io/en/stable/&quot;&gt;Django Channels&lt;/a&gt; package.  Jacob Kaplan-Moss has a great post on creating a &lt;a href=&quot;https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django&quot;&gt;chat room with Django channels&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;
&lt;p&gt;In this post I wanted to create something a little different, and that is to adapt Django Channels to read from an RSS feed for live data, essentially giving the RSS feed a seat in a chat room and the ability to notify everyone listening when new data is available.  Unfortunately, in order to know when an  RSS feed broadcasts new data we’ll need to poll the RSS feed for new data every few seconds.  When there are new filings the data will get parsed, stored in a database, and broadcasted to clients listening on the WebSocket.  In turn the React application will receive the fresh data whenever a new message is posted to the WebSocket.&lt;/p&gt;

&lt;script src=&quot;https://unpkg.com/mermaid@7.1.0/dist/mermaid.min.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    loop Every 5 seconds
        parser-&amp;gt;&amp;gt;rss: Any new filings?
    end
	alt no
		rss-&amp;gt;&amp;gt;parser: Don't do anything.
	else yes
		rss-&amp;gt;&amp;gt;parser: Retrieve the data and Inform the channel.
	end

    parser-&amp;gt;&amp;gt;api: Here's the cleaned up data.
    api-&amp;gt;&amp;gt;database: Store the data.
	api-&amp;gt;&amp;gt;channel: Publish the newest data for the group to consume.
	channel-&amp;gt;&amp;gt;react: All listeners, refresh your latest filings.
&lt;/div&gt;

&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h2&gt;

&lt;h3 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h3&gt;
&lt;h4 id=&quot;virtual-machine&quot;&gt;Virtual Machine&lt;/h4&gt;
&lt;p&gt;I’ll be using a virtual machine that I created in Digital Ocean running Ubuntu 16.04.3 x64.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://conda.io/miniconda.html&quot;&gt;Install mini-conda&lt;/a&gt;: If you have Anaconda already installed just skip this.  MiniConda is a lightweight version of Anaconda.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh &amp;amp;&amp;amp; bash Miniconda3-latest-Linux-x86_64.sh &amp;amp;&amp;amp; rm Miniconda3-latest-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;clone the repository&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:EricChea/secrss_feed.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Install dependencies for compilers&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install libmysqlclient-dev make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;TODO: Check if the actual install is necessary or if we can get away with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04&quot;&gt;Install MySQL&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;python-environment&quot;&gt;Python Environment&lt;/h4&gt;
&lt;p&gt;Lets start by creating our python environments:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;sec_api: manages the environment for the Django application.&lt;/li&gt;
  &lt;li&gt;sec_data: manages the environment for the package to retrieve data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot;&gt;Virtualenv&lt;/a&gt; can be used, but I’ve recently opted to use &lt;a href=&quot;https://conda.io/docs/&quot;&gt;Conda&lt;/a&gt; &lt;strong&gt;not&lt;/strong&gt; because I find huge advantages in using Conda over Virtualenv but rather the reason is a bit indirect. I want to have a python distribution that is consistent between both Windows OS and Linux based OSs and Anaconda offers this.  Since I’m using Anaconda it just makes sense to use the environment manager that comes with it.  Create python environments:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell_session&quot; data-lang=&quot;shell_session&quot;&gt;&amp;gt; conda create -n sec_api
&amp;gt; conda create -n sec_data

Activating the environments differ slightly between Linux and Windows OSs. I'll
be using the commands for Linux moving forward but if you're on a Windows system
please make adjustments where necessary.

Activate environment on Linux OS
&amp;gt; source activate [environment]

Activate environment on Windows OS
&lt;span class=&quot;err&quot;&gt;&amp;gt; activate [environment]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;install-dependencies&quot;&gt;Install dependencies&lt;/h4&gt;
&lt;p&gt;You can copy and paste the dependencies into a requirements file or simply download them from &lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install the Django API dependencies from &lt;a href=&quot;https://github.com&quot;&gt;sec_api/requirements.txt&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell_session&quot; data-lang=&quot;shell_session&quot;&gt;&amp;gt; conda activate sec_api
&lt;span class=&quot;err&quot;&gt;(sec_api)&amp;gt; pip install -r requirement.txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Install the data retrievel dependencies &lt;a href=&quot;https://github.com&quot;&gt;sec_data/requirements.txt&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell_session&quot; data-lang=&quot;shell_session&quot;&gt;&amp;gt; conda activate sec_data
&lt;span class=&quot;err&quot;&gt;(sec_data)&amp;gt; pip install -r requirement.txt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;polling-for-data&quot;&gt;Polling for data&lt;/h3&gt;

&lt;p&gt;The polling and kickoff of an etl process is handled by &lt;strong&gt;feeds.sec.Filing&lt;/strong&gt;.  Here is a code snippet that is responsible for polling the SEC RSS feed.  A Filing instance is instantiated and the feed is constantly refreshed until there is new data – assessed by &lt;code class=&quot;highlighter-rouge&quot;&gt;__is_process()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_data.feeds.sec&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;edgarfeedparser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_param_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edgarfeedparser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                 
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daemon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;                                                        
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                                              
    &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                                           
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rss_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                                
                                                                      
        &lt;span class=&quot;c&quot;&gt;# Used for easy reference during a refresh of the rss contents.         
&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rss_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rss_url&lt;/span&gt;                                                  
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feedparser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_file_stream_or_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rss_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         
        &lt;span class=&quot;n&quot;&gt;verify_feed_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                           
                                                                           
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accession_bank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_accession_nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                              


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__is_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accession_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                           
        &lt;span class=&quot;c&quot;&gt;# The rss feed gives at least two records per form 4 -- one for the     
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# issuer and one that is reporting (receiver) the transaction.          
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The function removes duplicates by the accession number.              
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Store entry data in a dictionary for better malleability              
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# We are not supporting other filing types except insiders for now      
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# If the accession number is already stored there is no need to         
&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# run a job to load it again.                                           
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_type&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SUPPORTED_FORMS&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accession_num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accession_bank&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;                                                        
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                                                   
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;                                                          


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__run_etl_jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                                   
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;One trick pony. Loads data into the designated data store.           
                                                                              
        If the summary data (entry) is an SEC filing and has not been noted in  
        our datastore then create an ETL job to handle the persistence.         
                                                                              
        Note: Since the backend databases are only called at the beginning of   
        the process if more than one process is spun up, neither process will   
        be aware of which accession numbers have been newly recorded.  This will
        most certainly lead to duplication of data.                             
                                                                              
        &quot;&quot;&quot;&lt;/span&gt;                                                                     
                                                                      
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                         
            &lt;span class=&quot;n&quot;&gt;entry_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                     
            &lt;span class=&quot;n&quot;&gt;form_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'form_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                                  
            &lt;span class=&quot;n&quot;&gt;accession_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'accession_num'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                          

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__is_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accession_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                     
                &lt;span class=&quot;n&quot;&gt;etl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ETL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                            
                &lt;span class=&quot;n&quot;&gt;etl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                                       
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accession_bank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accession_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
																		  
																		  
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                                              
      &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Starts pinging the feed for data                                    
      &quot;&quot;&quot;&lt;/span&gt;                                                                     
                                                                              
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                                             
          &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                                      
          &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__run_etl_jobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;new-message&quot;&gt;New message&lt;/h1&gt;
&lt;p&gt;When there is new data an ETL job is kicked off and handled by &lt;a href=&quot;https://github.com&quot;&gt;sec_data.etl.insiders.ETL&lt;/a&gt;.  The ETL process is pretty standard:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Extract and transform the data with an &lt;a href=&quot;https://github.com&quot;&gt;XML Parser&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Load the data into the database through a Django view.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ETL worker also publishes a message to the WebSocket when there is new data..
&lt;a href=&quot;https://github.com&quot;&gt;sec_api.sec_filings.views&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new_feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Signals that new data is in the feed.&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;asgi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel_layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                                                     
        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'websocket.new_message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'reply_channel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'websocket.new_message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'New Message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/feed/'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Message Received'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DjangoJSONEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;data-models&quot;&gt;Data Models&lt;/h3&gt;
&lt;p&gt;The data that we’ll be feeding in are filings from SEC insiders.  This can be simply thought of as a transaction, where the company(issuer) provides the product to the insider(owner).  Insider filings (forms 3,4, or 5) designate the type of security as either a:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;derivative (a finanical instrument derived from an underlying asset) or&lt;/li&gt;
  &lt;li&gt;nonderivative (typically shares in a company).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s a snippet of the model structure from &lt;a href=&quot;https://github.com&quot;&gt;sec_api/sec_filings/models.py&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                                          
    &lt;span class=&quot;n&quot;&gt;stateincorp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                            
    &lt;span class=&quot;n&quot;&gt;irsnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                            
    &lt;span class=&quot;n&quot;&gt;classification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                       
    &lt;span class=&quot;n&quot;&gt;fiscal_yearend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                    
    &lt;span class=&quot;n&quot;&gt;ticker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                                            
    &lt;span class=&quot;n&quot;&gt;isdirector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveSmallIntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                    
    &lt;span class=&quot;n&quot;&gt;isofficer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveSmallIntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                     
    &lt;span class=&quot;n&quot;&gt;officertitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonDerivative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;                                               
    &lt;span class=&quot;n&quot;&gt;security&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                        
    &lt;span class=&quot;n&quot;&gt;owner_istenpercentowner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveSmallIntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                       
    &lt;span class=&quot;n&quot;&gt;owner_sharesownedfollowingtransaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                      
                                                                                
    &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                              
    &lt;span class=&quot;n&quot;&gt;formtype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveSmallIntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                      
    &lt;span class=&quot;n&quot;&gt;isequityswap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveSmallIntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                  
    &lt;span class=&quot;n&quot;&gt;shares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                                     
                                                                                
    &lt;span class=&quot;c&quot;&gt;# D = Direct purchase, I = Indirect purchase.                               
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ownershipnature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                   
                                                                                
    &lt;span class=&quot;c&quot;&gt;# TODO: Create logic to extract price per share from text.                  
&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# pricepershare = DecimalField(max_digits=10, decimal_places=2)             
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pricepershare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;                                                 
                                                                                
    &lt;span class=&quot;c&quot;&gt;# A = Owner acquires new shares, D = Owner disposes of shares.              
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acqdisp_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;publishing-the-data-for-the-frontend&quot;&gt;Publishing the data for the frontend&lt;/h3&gt;
&lt;p&gt;Now that we have a way to store data and a means send a push notification to the frontend client the last bit of backend work is to transform the data so it can be consumed by the React application.  In Django channels there is a concept of consumers that are analogous to views in core Django.  The application we’re building only requires two routes to handle:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A new client connection and&lt;/li&gt;
  &lt;li&gt;When there is a new message detected by polling the SEC feed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_api.sec_filings.routing&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;channel_routing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'websocket.connect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'websocket.new_message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ws_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^/feed/$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case when a “new filing” is detected &lt;code class=&quot;highlighter-rouge&quot;&gt;ws_message()&lt;/code&gt; is called and it retrives the new data that has been loaded into our database and broadcasts the data to all listeners.  In this case everyone who visits the frontend is assigned to the same group by &lt;code class=&quot;highlighter-rouge&quot;&gt;ws_connect()&lt;/code&gt;.  When a client disconnects the channel or user is dropped from the group.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_api.sec_filings.consumers&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;broadcast_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Broadcasts the contents of a response object to the specified group.&quot;&quot;&quot;&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;message_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'/feed/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEC_GROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ws_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Connect a client to the open websocket and send data on connect.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEC_GROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ws_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ws_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Publishes data into the websocket for consumption from the frontend.
    When new data is available in the SEC rss feed this function is triggered.  
    All clients that have subscribed to the sec group will receive the new data.
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broadcast_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEC_GROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ws_disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Disconnect a listener from the group.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEC_GROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply_channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;starting-the-application&quot;&gt;Starting the application&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Message Broker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Message brokers can be used to setup a queue/worker/consumer workstream, and is used by Celery as well as Django Channels.  Owing to the workstream the processes that use this paradigm are scalable because more workers can be added to consume from a queue if it gets backlogged. 
First you’ll want to setup a Redis or RabbitMQ server.  They’re both popular message brokers. While I haven’t tested the performance between Redis vs. RabbitMQ it makes sense that Redis is faster since Redis is an in-memory key/value store without additional features that RabbitMQ comes with (including security and different types of ways to broker messages).  Nonenthless both are quite easy to setup – &lt;a href=&quot;https://redis.io/download&quot;&gt;Redis Install&lt;/a&gt; &lt;a href=&quot;https://github.com/MicrosoftArchive/redis&quot;&gt;Redis Windows Install&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial I’ll be using the PostgreSQL database, but other SQL flavors can be used.  For simple SQL queries I’d recommend using the &lt;a href=&quot;https://dbeaver.jkiss.org/&quot;&gt;DBeaver&lt;/a&gt; GUI.  DBeaver is an open source IDE that can plug into different SQL datbases including MySQL, PostgreSQL, Microsfot’s tSQL as well as other non-SQL data stores such as Mongo and the animal pack in Hadoop.  Each database has it’s own editor that is specialized to work in the ecosystem, i.e. SQL workbench for MySQL, Microsoft SQL Server Studio for tSQL, and SAP HANA IDE for SAP HANA and os on.  It’s often easier to use a single editor that can connect to all these data stores to run quries and explore the individual databases.  Launching PostgreSQL is fairly straightforward – you can also skip this as well.&lt;/p&gt;

&lt;p&gt;Create a database where our models will be storred.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot; data-lang=&quot;mysql&quot;&gt;CREATE DATABASE SEC_FILING;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next is to set environment variables.  This can be done in a variety of ways, but to keep things succinct for now we can simple export the following variables – this will be important when the workers are launched because they’ll need to talk the backend databases.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;SEC_FILING
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSQL_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;localhost or whereever you&lt;span class=&quot;s1&quot;&gt;'re hosting the SQL db.
export MYSQL_USER=&amp;lt;user&amp;gt;
export MYSQL_PASSWORD=&amp;lt;password&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point we can setup the tables using migration.  Simply execute &lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py migrate&lt;/code&gt; from the sec_api directory.  I’ve already included the data model so executing the command will automatically create the tables for you.&lt;/p&gt;

&lt;p&gt;There are three parts to the backend:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;server: Django channels provides the urls and routes to the views and consumers.  Jobs are queued through the urls and workers conume from the queue.  First ensure the Redis server is running, and if not then run &lt;code class=&quot;highlighter-rouge&quot;&gt;src/redis-server&lt;/code&gt; from where the redis application is installed. Also ensure these two enironment variables are set &lt;code class=&quot;highlighter-rouge&quot;&gt;export DJANGO_KEY=&amp;lt;secret_key&amp;gt; &amp;amp;&amp;amp; export LOCAL=1&lt;/code&gt;  Launch this from the root of sec_api by running &lt;code class=&quot;highlighter-rouge&quot;&gt;daphne sec_api.asgi:channel_layer&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;worker: Worker that will consume work from the APIs (views.py and consumers.py).  Much like celery one can launch multiple workers hence making this particularly scallable. Start a worker by running &lt;code class=&quot;highlighter-rouge&quot;&gt;python manage.py runworker&lt;/code&gt; from the root of the sec_api application.  Remember to set your SQL credentials as environment variables so the worker can talk to the database.&lt;/li&gt;
  &lt;li&gt;poll/feed: the poller and parser submits work to the server.  To start polling the sec feed run &lt;code class=&quot;highlighter-rouge&quot;&gt;python -m feeds.sec&lt;/code&gt; from the root of the sec_data package.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_api/sec_api/asgi.py&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;channels.asgi&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sec_api.settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;channel_layer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asgi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_channel_layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;frontend&quot;&gt;Frontend&lt;/h3&gt;
&lt;p&gt;The Facebook team has made it rediculously easy to start a React application with their &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt; package. In order to&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_frontend.index.js&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./index.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;registerServiceWorker&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./registerServiceWorker.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Filing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components/Filing.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSocketUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./utils.js'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSocketUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Render the components, picking up where react left off on the server
&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Filing&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;registerServiceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;components&quot;&gt;Components&lt;/h4&gt;
&lt;p&gt;There are three components that were contructed for the application, each to represent simple concepts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Filing: This represents a single sec filing. This component uses the Transaction and Cards components when it refreshes the browser user interface.  When a new message is received through the WebSocket the component receives the new data that is loaded through Django Channels and refreshes the &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.jsondata&lt;/code&gt; receives the json data from the channel and &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.divs&lt;/code&gt; is an array of cards of the most recent 20 company-owner transaction pairs.  It is &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.divs&lt;/code&gt; which is rendered.&lt;/li&gt;
  &lt;li&gt;Transaction: Within a filing there are often multiple transactions.  For example, John Doe can participate in a non-derivative transaction such as a direct stock award as well as a derivative transaction such as an award of stock options.&lt;/li&gt;
  &lt;li&gt;Card: These are representations of cards that will show up in the frontend.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;FlipMove is a wrapper that conveniently adds animation to animate the addition of cards to the current stack.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_frontend.src.components.Filing.js&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Card.js'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FlipMove&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-flip-move'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Filing&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;jsondata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;divs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;nx&quot;&gt;handleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
    Receive messages from the connected socket and update.
    */&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jsondata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  
  &lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*  
    Refreshes the state. Create an array with each element representing a card 
    that contains information on transactions reported to the SEC
    */&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;divs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companiesOwners&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsondata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;companies&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cardNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companiesOwners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;companiesOwners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ownerfiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;companiesOwners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owners&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Create a card for each owner-company pair.
&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ownerfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ownerfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ownerfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;cardNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;divs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;company&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cardNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Set the state of the json data and the divs that will be rendered
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;divs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;divs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


  &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;


  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FlipMove&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;staggerDurationBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;30&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;divs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/FlipMove&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;starting-the-frontend&quot;&gt;Starting the frontend&lt;/h4&gt;
&lt;p&gt;Now all we have left is to start the React application using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;.  Of note is this snippet in the package.json.  The npm start command starts a node server, while running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start:local&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start:production&lt;/code&gt; will make the server aware of the enironment by setting the REACT_APP_NODE_ENV global constant.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_frontend/package.json&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-scripts start 127.0.0.1:3000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;start:local&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SET \&quot;REACT_APP_NODE_ENV=local\&quot; &amp;amp;&amp;amp; npm start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;start:production&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SET \&quot;REACT_APP_NODE_ENV=production\&quot; &amp;amp;&amp;amp; npm start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In index.js you’ll notice that we define the socket to connect to in line &lt;code class=&quot;highlighter-rouge&quot;&gt;const socket = getSocketUrl()&lt;/code&gt;.  It is this function that enables us to distinguish between a production and local WebSocket endpoint.  If we set the REACT_APP_NODE_ENV constant to “local” then the application will have each client connect to 127.0.0.1:8000/feed/ while if it were set to production then it’ll point at another endpoint, in this case eldoradoapi.herokuapp.com/feed/.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;sec_frontend/src/utils.js&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSocketUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REACT_APP_NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ws://127.0.0.1:8000/feed/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REACT_APP_NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'production'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wss://eldoradoapi.herokuapp.com/feed/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Error: No feed detected.'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when there is new data that is made available in the sec RSS feed you should see that same data populate as cards.  Have fun with this, and incorporate it with other data.  Perhaps, you’ll be able to leverage other data points along with insider confidence in the stock to make a little extra money :).  However, this might not be the case as Wall Street is likely doing something more sophisticated – as well as &lt;a href=&quot;https://www.sec.gov/news/public-statement/statement-clayton-2017-09-20&quot;&gt;hackers&lt;/a&gt; alike.&lt;/p&gt;</content><author><name>Eric Chea</name></author><summary type="html">Number of words: 3078 17 minutes to read Introduction This post is for those who are interested in using Django Channels. Django Channels will be used in this application as a way to push data to the frontend from an RSS feed only when there is new data available as opposed to having the frontend application poll the RSS feed for new content. To get the most out of this application, you’ll need some basic understanding of the following: Django: building an API using Django views. React: building and serving up a static page using React. ETL: extracting XML data. In this post, we’ll be using the BeautifulSoup and feedparser Python packages. Background Django is a very attractive web framework because of the size of the vibrant community, it’s written in python (clean code), it’s secure, and it has a built-in backend admin interface. It has changed since it launched over ten years ago, one quite notable change is its ability to talk to multiple databases, a capability that was not available early on. Building a REST API is as simple as creating a view and updating a path for the URL. However, Django did fall behind – for instance it’s incompatibilities with newer technologies such as WebSockets. WebSockets enabled the ability for a server to actively push data to the client instead of requiring the client to poll the server for changes, dramatically freeing up bandwidth. It is this technology that has enabled the smooth communication in chat rooms and instant messages through these persistent, long-lived connections. Celery is an asynchronous task queue/job queue on distributed message passing. It leverages the brokering capabilities of the likes of RabbitMQ and Redis and provides function decorators to simplify the form of Python scripts. Like Redis and Rabbit, there can be multiple workers listening to the queue for new jobs to consume. Collectively, integration of WebSockets with some flavoring of Celery (no pun intended) became available with Andrew Goodkind’s spearheading of the Django Channels package. Jacob Kaplan-Moss has a great post on creating a chat room with Django channels. Architecture In this post I wanted to create something a little different, and that is to adapt Django Channels to read from an RSS feed for live data, essentially giving the RSS feed a seat in a chat room and the ability to notify everyone listening when new data is available. Unfortunately, in order to know when an RSS feed broadcasts new data we’ll need to poll the RSS feed for new data every few seconds. When there are new filings the data will get parsed, stored in a database, and broadcasted to clients listening on the WebSocket. In turn the React application will receive the fresh data whenever a new message is posted to the WebSocket. sequenceDiagram loop Every 5 seconds parser-&amp;gt;&amp;gt;rss: Any new filings? end alt no rss-&amp;gt;&amp;gt;parser: Don't do anything. else yes rss-&amp;gt;&amp;gt;parser: Retrieve the data and Inform the channel. end parser-&amp;gt;&amp;gt;api: Here's the cleaned up data. api-&amp;gt;&amp;gt;database: Store the data. api-&amp;gt;&amp;gt;channel: Publish the newest data for the group to consume. channel-&amp;gt;&amp;gt;react: All listeners, refresh your latest filings. Tutorial Environment Setup Virtual Machine I’ll be using a virtual machine that I created in Digital Ocean running Ubuntu 16.04.3 x64. Install mini-conda: If you have Anaconda already installed just skip this. MiniConda is a lightweight version of Anaconda. wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh &amp;amp;&amp;amp; bash Miniconda3-latest-Linux-x86_64.sh &amp;amp;&amp;amp; rm Miniconda3-latest-Linux-x86_64.sh clone the repository git clone git@github.com:EricChea/secrss_feed.git Install dependencies for compilers apt install libmysqlclient-dev make TODO: Check if the actual install is necessary or if we can get away with apt install libmysqlclient-dev Install MySQL Python Environment Lets start by creating our python environments: sec_api: manages the environment for the Django application. sec_data: manages the environment for the package to retrieve data. Virtualenv can be used, but I’ve recently opted to use Conda not because I find huge advantages in using Conda over Virtualenv but rather the reason is a bit indirect. I want to have a python distribution that is consistent between both Windows OS and Linux based OSs and Anaconda offers this. Since I’m using Anaconda it just makes sense to use the environment manager that comes with it. Create python environments: &amp;gt; conda create -n sec_api &amp;gt; conda create -n sec_data Activating the environments differ slightly between Linux and Windows OSs. I'll be using the commands for Linux moving forward but if you're on a Windows system please make adjustments where necessary. Activate environment on Linux OS &amp;gt; source activate [environment] Activate environment on Windows OS &amp;gt; activate [environment] Install dependencies You can copy and paste the dependencies into a requirements file or simply download them from Github. Install the Django API dependencies from sec_api/requirements.txt &amp;gt; conda activate sec_api (sec_api)&amp;gt; pip install -r requirement.txt Install the data retrievel dependencies sec_data/requirements.txt &amp;gt; conda activate sec_data (sec_data)&amp;gt; pip install -r requirement.txt Polling for data The polling and kickoff of an etl process is handled by feeds.sec.Filing. Here is a code snippet that is responsible for polling the SEC RSS feed. A Filing instance is instantiated and the feed is constantly refreshed until there is new data – assessed by __is_process(). sec_data.feeds.sec def main(): ... edgarfeedparser = Filing(url_param_string) thread = Thread(target=edgarfeedparser.run) thread.daemon = True thread.start() sleep(86400) class Filing(object): ... def __init__(self, rss_url): # Used for easy reference during a refresh of the rss contents. self.rss_url = rss_url self.feed = feedparser.parse(url_file_stream_or_string=rss_url) verify_feed_status(self.feed) self.accession_bank = get_accession_nums() def __is_process(self, form_type, accession_num): # The rss feed gives at least two records per form 4 -- one for the # issuer and one that is reporting (receiver) the transaction. # The function removes duplicates by the accession number. # Store entry data in a dictionary for better malleability # We are not supporting other filing types except insiders for now # If the accession number is already stored there is no need to # run a job to load it again. if form_type not in SUPPORTED_FORMS or accession_num in self.accession_bank : return False else: return True def __run_etl_jobs(self): &quot;&quot;&quot;One trick pony. Loads data into the designated data store. If the summary data (entry) is an SEC filing and has not been noted in our datastore then create an ETL job to handle the persistence. Note: Since the backend databases are only called at the beginning of the process if more than one process is spun up, neither process will be aware of which accession numbers have been newly recorded. This will most certainly lead to duplication of data. &quot;&quot;&quot; for entry in self.feed.entries: entry_map = create_entry(entry) form_type = entry_map['form_type'] accession_num = entry_map['accession_num'] if self.__is_process(form_type, accession_num): etl = ETL(entry_map) etl.run() self.accession_bank.append(accession_num) def run(self): &quot;&quot;&quot; Starts pinging the feed for data &quot;&quot;&quot; while True: self.refresh() self.__run_etl_jobs() New message When there is new data an ETL job is kicked off and handled by sec_data.etl.insiders.ETL. The ETL process is pretty standard: Extract and transform the data with an XML Parser. Load the data into the database through a Django view. The ETL worker also publishes a message to the WebSocket when there is new data.. sec_api.sec_filings.views def new_feed(request): &quot;&quot;&quot;Signals that new data is in the feed.&quot;&quot;&quot; asgi.channel_layer.send( channel='websocket.new_message', message={ 'reply_channel': 'websocket.new_message', 'text': 'New Message', 'path': '/feed/' } ) return HttpResponse( json.dumps(['Message Received'], cls=DjangoJSONEncoder), content_type='application/json', status=200 ) Data Models The data that we’ll be feeding in are filings from SEC insiders. This can be simply thought of as a transaction, where the company(issuer) provides the product to the insider(owner). Insider filings (forms 3,4, or 5) designate the type of security as either a: derivative (a finanical instrument derived from an underlying asset) or nonderivative (typically shares in a company). Here’s a snippet of the model structure from sec_api/sec_filings/models.py. class Company(Entity): stateincorp = CharField(max_length=2, null=True) irsnum = IntegerField(null=True) classification = CharField(max_length=200, null=True) fiscal_yearend = IntegerField(null=True) ticker = CharField(max_length=5, null=True) class Owner(Entity): isdirector = PositiveSmallIntegerField() isofficer = PositiveSmallIntegerField() officertitle = CharField(max_length=200, null=True) class NonDerivative(Transaction): security = CharField(max_length=100) owner_istenpercentowner = PositiveSmallIntegerField() owner_sharesownedfollowingtransaction = IntegerField() code = CharField(max_length=1) formtype = PositiveSmallIntegerField() isequityswap = PositiveSmallIntegerField() shares = IntegerField() # D = Direct purchase, I = Indirect purchase. ownershipnature = CharField(max_length=1) # TODO: Create logic to extract price per share from text. # pricepershare = DecimalField(max_digits=10, decimal_places=2) pricepershare = TextField() # A = Owner acquires new shares, D = Owner disposes of shares. acqdisp_code = CharField(max_length=1) Publishing the data for the frontend Now that we have a way to store data and a means send a push notification to the frontend client the last bit of backend work is to transform the data so it can be consumed by the React application. In Django channels there is a concept of consumers that are analogous to views in core Django. The application we’re building only requires two routes to handle: A new client connection and When there is a new message detected by polling the SEC feed. sec_api.sec_filings.routing channel_routing = [ route('websocket.connect', consumers.ws_connect), route('websocket.new_message', consumers.ws_message, path=r'^/feed/$'), ] In this case when a “new filing” is detected ws_message() is called and it retrives the new data that has been loaded into our database and broadcasts the data to all listeners. In this case everyone who visits the frontend is assigned to the same group by ws_connect(). When a client disconnects the channel or user is dropped from the group. sec_api.sec_filings.consumers def broadcast_message(response, group): &quot;&quot;&quot;Broadcasts the contents of a response object to the specified group.&quot;&quot;&quot; message_content = dict(content=json.loads(response.content), path=r'/feed/') Group(constants.SEC_GROUP).send(dict(text=json.dumps(message_content))) def ws_connect(message): &quot;&quot;&quot;Connect a client to the open websocket and send data on connect.&quot;&quot;&quot; Group(constants.SEC_GROUP).add(message.reply_channel) ws_message(message) def ws_message(message): &quot;&quot;&quot;Publishes data into the websocket for consumption from the frontend. When new data is available in the SEC rss feed this function is triggered. All clients that have subscribed to the sec group will receive the new data. &quot;&quot;&quot; response = views.get_feed(HttpRequest()) broadcast_message(response, constants.SEC_GROUP) def ws_disconnect(message): &quot;&quot;&quot;Disconnect a listener from the group.&quot;&quot;&quot; Group(constants.SEC_GROUP).discard(message.reply_channel) Starting the application Message Broker Message brokers can be used to setup a queue/worker/consumer workstream, and is used by Celery as well as Django Channels. Owing to the workstream the processes that use this paradigm are scalable because more workers can be added to consume from a queue if it gets backlogged. First you’ll want to setup a Redis or RabbitMQ server. They’re both popular message brokers. While I haven’t tested the performance between Redis vs. RabbitMQ it makes sense that Redis is faster since Redis is an in-memory key/value store without additional features that RabbitMQ comes with (including security and different types of ways to broker messages). Nonenthless both are quite easy to setup – Redis Install Redis Windows Install. SQL Database In this tutorial I’ll be using the PostgreSQL database, but other SQL flavors can be used. For simple SQL queries I’d recommend using the DBeaver GUI. DBeaver is an open source IDE that can plug into different SQL datbases including MySQL, PostgreSQL, Microsfot’s tSQL as well as other non-SQL data stores such as Mongo and the animal pack in Hadoop. Each database has it’s own editor that is specialized to work in the ecosystem, i.e. SQL workbench for MySQL, Microsoft SQL Server Studio for tSQL, and SAP HANA IDE for SAP HANA and os on. It’s often easier to use a single editor that can connect to all these data stores to run quries and explore the individual databases. Launching PostgreSQL is fairly straightforward – you can also skip this as well. Create a database where our models will be storred. CREATE DATABASE SEC_FILING; Next is to set environment variables. This can be done in a variety of ways, but to keep things succinct for now we can simple export the following variables – this will be important when the workers are launched because they’ll need to talk the backend databases. export MYSQL_DATABASE=SEC_FILING export MYSQL_HOST=localhost or whereever you're hosting the SQL db. export MYSQL_USER=&amp;lt;user&amp;gt; export MYSQL_PASSWORD=&amp;lt;password&amp;gt; At this point we can setup the tables using migration. Simply execute python manage.py migrate from the sec_api directory. I’ve already included the data model so executing the command will automatically create the tables for you. There are three parts to the backend: server: Django channels provides the urls and routes to the views and consumers. Jobs are queued through the urls and workers conume from the queue. First ensure the Redis server is running, and if not then run src/redis-server from where the redis application is installed. Also ensure these two enironment variables are set export DJANGO_KEY=&amp;lt;secret_key&amp;gt; &amp;amp;&amp;amp; export LOCAL=1 Launch this from the root of sec_api by running daphne sec_api.asgi:channel_layer. worker: Worker that will consume work from the APIs (views.py and consumers.py). Much like celery one can launch multiple workers hence making this particularly scallable. Start a worker by running python manage.py runworker from the root of the sec_api application. Remember to set your SQL credentials as environment variables so the worker can talk to the database. poll/feed: the poller and parser submits work to the server. To start polling the sec feed run python -m feeds.sec from the root of the sec_data package. sec_api/sec_api/asgi.py import os import channels.asgi os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;sec_api.settings&quot;) channel_layer = channels.asgi.get_channel_layer() Frontend The Facebook team has made it rediculously easy to start a React application with their create-react-app package. In order to sec_frontend.index.js import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import registerServiceWorker from './registerServiceWorker.js'; import Filing from './components/Filing.js'; import { getSocketUrl } from './utils.js' const socket = getSocketUrl(); // Render the components, picking up where react left off on the server const element = &amp;lt;Filing socket={socket}/&amp;gt;; ReactDOM.render(element, document.getElementById('root')); registerServiceWorker(); Components There are three components that were contructed for the application, each to represent simple concepts: Filing: This represents a single sec filing. This component uses the Transaction and Cards components when it refreshes the browser user interface. When a new message is received through the WebSocket the component receives the new data that is loaded through Django Channels and refreshes the this.state. The this.state.jsondata receives the json data from the channel and this.state.divs is an array of cards of the most recent 20 company-owner transaction pairs. It is this.state.divs which is rendered. Transaction: Within a filing there are often multiple transactions. For example, John Doe can participate in a non-derivative transaction such as a direct stock award as well as a derivative transaction such as an award of stock options. Card: These are representations of cards that will show up in the frontend. FlipMove is a wrapper that conveniently adds animation to animate the addition of cards to the current stack. sec_frontend.src.components.Filing.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90import React, { Component} from 'react'; import Card from './Card.js' import FlipMove from 'react-flip-move'; export default class Filing extends Component { constructor(props) { super(props); this.state = { jsondata: {content: {companies: []}}, divs: [], }; this.ws = new WebSocket(this.props.socket) this.refresh = this.refresh.bind(this); this.handleData = this.handleData.bind(this); } handleData(data) { /* Receive messages from the connected socket and update. */ let result = JSON.parse(data); this.setState({jsondata: result}); this.refresh(); } refresh() { /* Refreshes the state. Create an array with each element representing a card that contains information on transactions reported to the SEC */ let divs = []; let companiesOwners = this.state.jsondata.content.companies let cardNum = 0 for (let i=0; i &amp;lt; companiesOwners.length; i++) { let company = Object.keys(companiesOwners[i]); let ownerfiles = companiesOwners[i][company].owners // Create a card for each owner-company pair. for (let j=0; j &amp;lt; ownerfiles.length; j++) { let owner = Object.keys(ownerfiles[j]) let transaction = ownerfiles[j][owner] cardNum += 1; divs.push( &amp;lt;div key={cardNum}&amp;gt; &amp;lt;Card transaction={transaction} owner={owner} company={company} cardNum={cardNum} /&amp;gt; &amp;lt;/div&amp;gt; ) } } // Set the state of the json data and the divs that will be rendered this.setState({divs: divs}); }; componentWillUnmount() { this.ws.close() }; render() { return ( &amp;lt;div&amp;gt; &amp;lt;FlipMove staggerDurationBy=&quot;30&quot; duration={600}&amp;gt; {this.state.divs} &amp;lt;/FlipMove&amp;gt; &amp;lt;/div&amp;gt; ); } }; Starting the frontend Now all we have left is to start the React application using npm start. Of note is this snippet in the package.json. The npm start command starts a node server, while running npm run start:local or npm run start:production will make the server aware of the enironment by setting the REACT_APP_NODE_ENV global constant. sec_frontend/package.json ... &quot;start&quot;: &quot;react-scripts start 127.0.0.1:3000&quot;, &quot;start:local&quot;: &quot;SET \&quot;REACT_APP_NODE_ENV=local\&quot; &amp;amp;&amp;amp; npm start&quot;, &quot;start:production&quot;: &quot;SET \&quot;REACT_APP_NODE_ENV=production\&quot; &amp;amp;&amp;amp; npm start&quot;, ... In index.js you’ll notice that we define the socket to connect to in line const socket = getSocketUrl(). It is this function that enables us to distinguish between a production and local WebSocket endpoint. If we set the REACT_APP_NODE_ENV constant to “local” then the application will have each client connect to 127.0.0.1:8000/feed/ while if it were set to production then it’ll point at another endpoint, in this case eldoradoapi.herokuapp.com/feed/. sec_frontend/src/utils.js export function getSocketUrl() { if (process.env.REACT_APP_NODE_ENV === 'local') { return ('ws://127.0.0.1:8000/feed/'); } else if (process.env.REACT_APP_NODE_ENV === 'production') { return ('wss://eldoradoapi.herokuapp.com/feed/'); } else { return 'Error: No feed detected.' } } Now, when there is new data that is made available in the sec RSS feed you should see that same data populate as cards. Have fun with this, and incorporate it with other data. Perhaps, you’ll be able to leverage other data points along with insider confidence in the stock to make a little extra money :). However, this might not be the case as Wall Street is likely doing something more sophisticated – as well as hackers alike.</summary></entry></feed>